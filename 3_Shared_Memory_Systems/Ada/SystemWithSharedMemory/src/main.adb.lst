GNAT GPL 2016 (20160515-49)
Copyright 1992-2016, Free Software Foundation, Inc.

Compiling: main.adb
Source file time stamp: 2017-05-02 12:19:00
Compiled at: 2017-05-03 03:58:31

     1. ------------------------Main program------------------------------
     2. --Programming for parallel computer systems
     3. --Course work part #1. System with shared memory. Ada. Protected Units
     4. --Sergiy Kurgansky
     5. --NTUU "KPI"
     6. --FICT IO-41
     7. --25.04.2017
     8. --Task: MA = (MB*MC)*e + max(Z)*MO
     9. ------------------------------------------------------------------
    10.
    11. with Data, Ada.Text_IO, Ada.Integer_text_iO, Ada.Synchronous_Task_Control, Ada.Calendar;
    12. use Ada.Text_IO, Ada.Integer_text_iO, Ada.Synchronous_Task_Control, Ada.Calendar;
    13.
    14. procedure Main is
    15.
    16.    N: Integer :=12;
    17.    P: Integer :=6;
    18.    H: Integer:= N/P;
    19.
    20.    package MonitorsData is new Data(N);
    21.    use MonitorsData;
    22.
    23.    Z : Vect;
    24.    MA, MB, MC, MO: Matrix;
    25.    e : Integer;
    26.
    27.    StartTime, FinishTime: Time;
    28.    DiffTime: Duration;
    29.
    30.    protected Synchronization is
    31.       entry WaitForInput;
    32.       entry WaitForMax;
    33.       entry WaitForCalc;
    34.       procedure InputSignal;
    35.       procedure MaxSignal;
    36.       procedure CalcSignal;
    37.
    38.    private
    39.       inputFlag:Natural:=0;
    40.       maxFlag:Natural:=0;
    41.       calcFlag:Natural:=0;
    42.
    43.    end Synchronization;
    44.
    45.    protected SharedResourse is
    46.       procedure SetMax(data : in Integer);
    47.       procedure SetMC(data : in Matrix);
    48.       procedure Sete(data : in Integer);
    49.
    50.       function CopyMax return Integer;
    51.       function Copye return Integer;
    52.       function CopyMC return Matrix;
    53.
    54.    private
    55.       e: Integer;
    56.       max: Integer := Integer'First;
    57.       MC:Matrix;
    58.
    59.    end SharedResourse;
    60.
    61.    protected body Synchronization is
    62.
    63.       procedure InputSignal is
    64.       begin
    65.          inputFlag := inputFlag + 1;
    66.       end InputSignal;
    67.
    68.       procedure CalcSignal is
    69.       begin
    70.          calcFlag := calcFlag + 1;
    71.       end CalcSignal;
    72.
    73.       procedure MaxSignal is
    74.       begin
    75.          maxFlag := maxFlag + 1;
    76.       end MaxSignal;
    77.
    78.       entry WaitForInput
    79.         when inputFlag = 3 is
    80.       begin
    81.          null;
    82.       end WaitForInput;
    83.
    84.       entry WaitForCalc
    85.         when calcFlag = 5 is
    86.       begin
    87.          null;
    88.       end WaitForCalc;
    89.
    90.       entry WaitForMax
    91.         when maxFlag = 6 is
    92.       begin
    93.          null;
    94.       end WaitForMax;
    95.
    96.    end Synchronization;
    97.
    98.    protected body SharedResourse is
    99.
   100.       procedure SetMax(data : in Integer) is
   101.       begin
   102.          if data >= max then
   103.             max := data;
   104.          end if;
   105.       end SetMax;
   106.
   107.       procedure Sete(data : in Integer) is
   108.       begin
   109.          e := data;
   110.       end Sete;
   111.
   112.       procedure SetMC(data : in Matrix) is
   113.       begin
   114.          MC:=data;
   115.       end SetMC;
   116.
   117.       function Copye return Integer is
   118.       begin
   119.          return e;
   120.       end Copye;
   121.
   122.       function CopyMax return Integer is
   123.       begin
   124.          return max;
   125.       end CopyMax;
   126.
   127.       function CopyMC return Matrix is
   128.       begin
   129.          return MC;
   130.       end CopyMC;
   131.
   132.    end SharedResourse;
   133.
   134.    procedure StartTasks  is
   135.
   136.       task T1;
   137.       MC1:Matrix;
   138.       e1:Integer;
   139.       m1:Integer;
   140.       task body T1 is
   141.       begin
   142.
   143.          Put_Line ("T1 started");
   144.
   145.          --Input MB
   146.          InputSimpleMatrix(MB);
   147.          InputSimpleMatrix(MO);
   148.
   149.          Synchronization.InputSignal;
   150.
   151.          Synchronization.WaitForInput;
   152.
   153.          m1 := Max(Z, 1, H);
   154.
   155.          SharedResourse.SetMax(m1);
   156.
   157.          Synchronization.MaxSignal;
   158.
   159.          Synchronization.WaitForMax;
   160.
   161.          m1 := SharedResourse.CopyMax;
   162.          MC1 := SharedResourse.CopyMC;
   163.          e1 := SharedResourse.Copye;
   164.
   165.          for i in 1..H loop
   166.             for j in 1..N loop
   167.                MA(i,j) :=0;
   168.                for k in 1..N loop
   169.                   MA(i,j) := MA(i,j) + MB(i,k) * MC1(k,j);
   170.                end loop;
   171.                MA(i,j) := e1*MA(i,j) + m1*MO(i,j);
   172.             end loop;
   173.          end loop;
   174.
   175.          Synchronization.CalcSignal;
   176.
   177.          Put_Line ("T1 finished");
   178.       end T1;
   179.
   180.       task T2;
   181.       MC2:Matrix;
   182.       e2:Integer;
   183.       m2:Integer;
   184.       task body T2 is
   185.       begin
   186.
   187.          Put_Line ("T2 started");
   188.
   189.          Synchronization.WaitForInput;
   190.
   191.          m2 := Max(Z, H+1, 2*H);
   192.
   193.          SharedResourse.SetMax(m2);
   194.
   195.          Synchronization.MaxSignal;
   196.
   197.          Synchronization.WaitForMax;
   198.
   199.          m2 := SharedResourse.CopyMax;
   200.          MC2 := SharedResourse.CopyMC;
   201.          e2 := SharedResourse.Copye;
   202.
   203.          for i in H+1..2*H loop
   204.             for j in 1..N loop
   205.                MA(i,j) :=0;
   206.                for k in 1..N loop
   207.                   MA(i,j) := MA(i,j) + MB(i,k) * MC2(k,j);
   208.                end loop;
   209.                MA(i,j) := e2*MA(i,j) + m2*MO(i,j);
   210.             end loop;
   211.          end loop;
   212.
   213.          Synchronization.CalcSignal;
   214.
   215.          Put_Line ("T2 finished");
   216.       end T2;
   217.
   218.       task T3;
   219.       MC3:Matrix;
   220.       e3:Integer;
   221.       m3:Integer;
   222.       task body T3 is
   223.       begin
   224.
   225.          Put_Line ("T3 started");
   226.
   227.          --Input MC
   228.          InputSimpleMatrix(MC);
   229.
   230.          SharedResourse.SetMC(MC);
   231.
   232.          Synchronization.InputSignal;
   233.
   234.          Synchronization.WaitForInput;
   235.
   236.          m3 := Max(Z, 2*H+1, 3*H);
   237.
   238.          SharedResourse.SetMax(m3);
   239.
   240.          Synchronization.MaxSignal;
   241.
   242.          Synchronization.WaitForMax;
   243.
   244.          m3 := SharedResourse.CopyMax;
   245.          MC3 := SharedResourse.CopyMC;
   246.          e3 := SharedResourse.Copye;
   247.
   248.          for i in 2*H+1..3*H loop
   249.             for j in 1..N loop
   250.                MA(i,j) :=0;
   251.                for k in 1..N loop
   252.                   MA(i,j) := MA(i,j) + MB(i,k) * MC3(k,j);
   253.                end loop;
   254.                MA(i,j) := e3*MA(i,j) + m3*MO(i,j);
   255.             end loop;
   256.          end loop;
   257.
   258.          Synchronization.CalcSignal;
   259.
   260.          Put_Line ("T3 finished");
   261.       end T3;
   262.
   263.       task T4;
   264.       MC4:Matrix;
   265.       e4:Integer;
   266.       m4:Integer;
   267.       task body T4 is
   268.       begin
   269.
   270.          Put_Line ("T4 started");
   271.
   272.          Synchronization.WaitForInput;
   273.
   274.          m4 := Max(Z, 3*H+1, N);
   275.
   276.          SharedResourse.SetMax(m4);
   277.
   278.          Synchronization.MaxSignal;
   279.
   280.          Synchronization.WaitForMax;
   281.
   282.          m4 := SharedResourse.CopyMax;
   283.          MC4 := SharedResourse.CopyMC;
   284.          e4 := SharedResourse.Copye;
   285.
   286.          for i in 3*H+1..4*H loop
   287.             for j in 1..N loop
   288.                MA(i,j) :=0;
   289.                for k in 1..N loop
   290.                   MA(i,j) := MA(i,j) + MB(i,k) * MC4(k,j);
   291.                end loop;
   292.                MA(i,j) := e4*MA(i,j) + m4*MO(i,j);
   293.             end loop;
   294.          end loop;
   295.
   296.          Synchronization.CalcSignal;
   297.
   298.          Put_Line ("T4 finished");
   299.       end T4;
   300.
   301.       task T5;
   302.       MC5:Matrix;
   303.       e5:Integer;
   304.       m5:Integer;
   305.       task body T5 is
   306.       begin
   307.
   308.          Put_Line ("T5 started");
   309.
   310.          --Input e, Z
   311.          e:=1;
   312.          InputSimpleVect(Z);
   313.          --Z(2):=2;
   314.
   315.          SharedResourse.Sete(e);
   316.
   317.          Synchronization.InputSignal;
   318.
   319.          Synchronization.WaitForInput;
   320.
   321.          m5 := Max(Z, 4*H+1, 5*H);
   322.
   323.          SharedResourse.SetMax(m5);
   324.
   325.          Synchronization.MaxSignal;
   326.
   327.          Synchronization.WaitForMax;
   328.
   329.          m5 := SharedResourse.CopyMax;
   330.          MC5 := SharedResourse.CopyMC;
   331.          e5 := SharedResourse.Copye;
   332.
   333.          for i in 4*H+1..5*H loop
   334.             for j in 1..N loop
   335.                MA(i,j) :=0;
   336.                for k in 1..N loop
   337.                   MA(i,j) := MA(i,j) + MB(i,k) * MC5(k,j);
   338.                end loop;
   339.                MA(i,j) := e5*MA(i,j) + m5*MO(i,j);
   340.             end loop;
   341.          end loop;
   342.
   343.          Synchronization.CalcSignal;
   344.
   345.          Put_Line ("T5 finished");
   346.       end T5;
   347.
   348.       task T6;
   349.       MC6:Matrix;
   350.       e6:Integer;
   351.       m6:Integer;
   352.       task body T6 is
   353.       begin
   354.
   355.          Put_Line ("T6 started");
   356.
   357.          Synchronization.WaitForInput;
   358.
   359.          m6 := Max(Z, 5*H+1, N);
   360.
   361.          SharedResourse.SetMax(m6);
   362.
   363.          Synchronization.MaxSignal;
   364.
   365.          Synchronization.WaitForMax;
   366.
   367.          m6 := SharedResourse.CopyMax;
   368.          MC6 := SharedResourse.CopyMC;
   369.          e6 := SharedResourse.Copye;
   370.
   371.          for i in 5*H+1..N loop
   372.             for j in 1..N loop
   373.                MA(i,j) :=0;
   374.                for k in 1..N loop
   375.                   MA(i,j) := MA(i,j) + MB(i,k) * MC6(k,j);
   376.                end loop;
   377.                MA(i,j) := e6*MA(i,j) + m6*MO(i,j);
   378.             end loop;
   379.          end loop;
   380.
   381.          Synchronization.WaitForCalc;
   382.
   383.          New_Line;
   384.          Put("MA = ");
   385.          New_Line;
   386.          ShowMatr(MA);
   387.          New_Line;
   388.
   389.          Put_Line ("T6 finished");
   390.
   391.          FinishTime := Clock;
   392.          DiffTime := FinishTime - StartTime;
   393.
   394.          Put("Time : ");
   395.          Put(Integer(DiffTime), 1);
   396.          Put_Line("");
   397.       end T6;
   398.
   399.
   400.       begin
   401.          null;
   402.       end StartTasks;
   403.
   404.
   405. begin
   406.    StartTime := Clock;
   407.    Put_Line ("Main thread started");
   408.    StartTasks;
   409.    Put_Line ("Main thread finished");
   410.
   411. end Main;

 411 lines: No errors
